{
	"Init Nano Router": {
		"prefix": "snippet-init-router",
		"scope": "javascript",
		"body": [
		"const { Router } = require('express');",
		"",
		"function create${1:routerName}Router(handleRequest, ${2:controller}) {",
		"\tconst router = Router();",
		"\trouter.post('/', async (req, res, next) => {",
		"\t\tawait handleRequest(",
		"\t\t\treq, res, next, '',",
		"\t\t\tasync requestOptions => ${2:controller}.${3:controllerFunction}({ ...req.body, ...requestOptions }),",
		"\t\t);",
		"\t});",
		"",
		"\treturn router;",
		"}",
		"",
		"function register${1:routerName}Api(registry) {",
		"\tregistry.service('kpiActivityApiRouter', create${1:routerName}Router, 'handleRequest', '${2:controller}');",
		"}",
		"",
		"exports.register${1:routerName}Api = register${1:routerName}Api;"
		]
	},
	"Init Nano Controller":{
		"prefix": "snippet-init-controller",
		"scope": "javascript",
		"body": [
			"//TODO: Remember to import inspect from commonUtils",
			"function create${1:controllerName}Controller(logger, auditLogService) {",
			"\tasync function ${2:functionName}(params) {",
			"\t\tconst { requestId } = params;",
			"\t\t// Should Decide need to trim params",
			"\t\tlogger.info(`[${${requestId}}] ---- [START] ${3:msg}  ---- ${inspect(params)}`);",
			"\t\ttry {",
			"\t\t\t// TODO: Apply sanitizeSchema function here",
			"\t\t\t// Do something",
			"\t\t// TODO: Decide which auditLogService method to use writeAccessLog or writeActivityLog",
			"\t\t// TODO: Apply sanitizeSchema function here",
			"\t\t// TODO: success auditLogService snippet-command auditLogService-success",
			"\t\t\treturn {};",
			"\t\t} catch (ex) {",
			"\t\t\t// Handle Error here",
			"\t\t// TODO: Decide which auditLogService method to use writeAccessLog or writeActivityLog",
			"\t\t// TODO: failed auditLogService snippet-command auditLogService-failed",
			"\t\t\tthrow ex;",
			"\t\t} finally {",
			"\t\t\tlogger.info(`[${3:requestId}] ---- [ END ] ${3:msg}  ---- ${inspect(params)}`);",
			"\t\t}",
			"\t}",
			"",
			"\treturn {",
			"\t\t${2:functionName},",
			"\t};",
			"}",
			"",
			"function register${1:controllerName}Controller(registry) {",
			"\tregistry.service('${8:controllerName}', create${1:controllerName}Controller, 'logger', 'auditLogService');",
			"}",
			"",
			"exports.register${1:controllerName}Controller = register${1:controllerName}Controller;"
		]
	},
	"Create Nano Failed Audit Log Service" : {
		"scope": "javascript",
		"prefix": "snippet-auditLogService-failed",
		"body": [
			"\t\tawait auditLogService.${1:functionName}({",
			"\t\t\t...params,",
			"\t\t\taction: LOG_ACTION.${2:action},",
			"\t\t\tactivity: LOG_ACTIVITY.${3:activity},",
			"\t\t\t // TODO: Decide log data structure here",
			"\t\t});"
		]
	},
	"Create Nano Success Audit Log Service" : {
		"scope": "javascript",
		"prefix": "snippet-auditLogService-success",
		"body": [
			"\t\tawait auditLogService.${1:functionName}({",
			"\t\t\t...sanitizedParams,",
			"\t\t\taction: LOG_ACTION.${2:action},",
			"\t\t\tactivity: LOG_ACTIVITY.${3:activity},",
			"\t\t\t // TODO: Decide log data structure here",
			"\t\t});"
		]
	},
	"Create Nano Controller function": {
		"scope": "javascript",
		"prefix": "snippet-controller-func",
		"body": [
			"async function ${1:controllerName}(params) {",
			"\tconst { requestId } = params;",
			"\t// Should Decide need to trim params",
			"\tlogger.info(`[${${requestId}}] ---- [START] ${2:msg}  ---- ${inspect(params)}`);",
			"\ttry {",
			"\t\t// Do something",
			"\t\t// TODO: Decide which auditLogService method to use writeAccessLog or writeActivityLog",
			"\t\t// TODO: Apply sanitizeSchema function here",
			"\t\t// TODO: success auditLogService snippet-command auditLogService-success",
			"\t\treturn {};",
			"\t} catch (ex) {",
			"\t\t// Handle Error here",
			"\t\t// TODO: Decide which auditLogService method to use writeAccessLog or writeActivityLog",
			"\t\t// TODO: failed auditLogService snippet-command auditLogService-failed",
			"\t\tthrow ex;",
			"\t} finally {",
			"\t\tlogger.info(`[${${requestId}}] ---- [ END ] ${2:msg}  ---- ${inspect(params)}`);",
			"\t}",
			"}"
		],
		"description": "Create Nano Controller function"
	},
	"Create Unit Test": {
		"prefix": "snippet-init-unit-test",
		"description": "Create test script",
		"body": [
            "const Bottle = require('bottlejs');",
            "const chai = require('chai');",
            "const chaiAsPromised = require('chai-as-promised');",
            "const sinonChai = require('sinon-chai');",
            "const sinon = require('sinon');",
            "",
            "const { createStubs } = require('../stub/index');",
            "const { createNoopLogger } = require('../../noop-logger');",
			"// TODO: import test register function",
            "",
            "",
            "chai.use(chaiAsPromised);",
            "chai.use(sinonChai);",
            "const { expect } = chai;",
            "",
            "describe('${1:Component name}', () => {",
            "  let sandbox;",
            "  let registry;",
            "",
            "  beforeEach(() => {",
            "    sandbox = sinon.createSandbox();",
            "    ({ } = createStubs(sandbox));",
            "    registry = new Bottle();",
            "    registry.service('logger', createNoopLogger);",
            "    // TODO: register register function",
            "  });",
            "",
            "  afterEach(() => {",
            "    sandbox.restore();",
            "  });",
            "  // TODO: Apply unit test here",
            "});"
        ]
	}
}